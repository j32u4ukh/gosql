// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: pb/user_data.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// {"comment": "玩家 ID", "type": "BIGINT", "size": 20, "default": "nil", "primary_key": "default"}
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// {"comment": "道具暱稱(可中文)數量", "type": "VARCHAR", "size": 20, "default": "null", "can_null": "true"}
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// {"comment": "帳號 LV", "type": "SMALLINT", "size": 6, "default": "1", "can_null": "true"}
	AccountLv int32 `protobuf:"varint,3,opt,name=account_lv,json=accountLv,proto3" json:"account_lv,omitempty"`
	// {"comment": "帳號 EXP", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	AccountExp int32 `protobuf:"varint,4,opt,name=account_exp,json=accountExp,proto3" json:"account_exp,omitempty"`
	// {"comment": "體力值最後一次更新的時間", "type": "TIMESTAMP", "default": "'2000-01-01 00:00:00'", "can_null": "false"}
	LastActPointAllSec *TimeStamp `protobuf:"bytes,5,opt,name=last_act_point_all_sec,json=lastActPointAllSec,proto3" json:"last_act_point_all_sec,omitempty"`
	// {"comment": "舊資料轉換成新資料的位元旗號", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	ConvertDataFl int32 `protobuf:"varint,6,opt,name=convert_data_fl,json=convertDataFl,proto3" json:"convert_data_fl,omitempty"`
	// {"comment": "抽寶箱的 exp", "type": "SMALLINT", "size": 6, "default": "0", "can_null": "false"}
	LotteryExp_0 int32 `protobuf:"varint,7,opt,name=lottery_exp_0,json=lotteryExp0,proto3" json:"lottery_exp_0,omitempty"`
	// {"comment": "額外擴充的虛寶空間數", "type": "SMALLINT", "size": 6, "default": "0", "can_null": "false"}
	AddItemSpace int32 `protobuf:"varint,8,opt,name=add_item_space,json=addItemSpace,proto3" json:"add_item_space,omitempty"`
	// {"comment": "行動點數", "type": "SMALLINT", "size": 6, "default": "0", "can_null": "false"}
	ActPoint int32 `protobuf:"varint,9,opt,name=act_point,json=actPoint,proto3" json:"act_point,omitempty"`
	// {"comment": "最後領取等級獎勵時的 LV", "type": "SMALLINT", "size": 6, "default": "1", "can_null": "true"}
	Lv int32 `protobuf:"varint,10,opt,name=lv,proto3" json:"lv,omitempty"`
	// {"comment": "最後領取等級獎勵時的 EXP", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	Exp int32 `protobuf:"varint,11,opt,name=exp,proto3" json:"exp,omitempty"`
	// {"comment": "記錄檔的版本編號", "type": "VARCHAR", "size": 20, "default": "'0.0.0.0'", "can_null": "false"}
	DataVer string `protobuf:"bytes,12,opt,name=data_ver,json=dataVer,proto3" json:"data_ver,omitempty"`
	// {"comment": "玩家的遊戲資料", "type": "MEDIUMTEXT", "default": "'{}'", "can_null": "false"}
	JsonText1 string `protobuf:"bytes,13,opt,name=json_text1,json=jsonText1,proto3" json:"json_text1,omitempty"`
	// {"comment": "新版玩家資料", "type": "MEDIUMTEXT", "default": "''", "can_null": "false"}
	SaveData string `protobuf:"bytes,14,opt,name=save_data,json=saveData,proto3" json:"save_data,omitempty"`
	// {"comment": "Easy 通關獎勵的領取旗號(位元旗號)", "type": "VARCHAR", "size": 1200, "default": "null", "can_null": "true"}
	StageAwardGetFl_0 string `protobuf:"bytes,15,opt,name=stage_award_get_fl_0,json=stageAwardGetFl0,proto3" json:"stage_award_get_fl_0,omitempty"`
	// {"comment": "Normal 通關獎勵的領取旗號(位元旗號)", "type": "VARCHAR", "size": 200, "default": "null", "can_null": "true"}
	StageAwardGetFl_1 string `protobuf:"bytes,16,opt,name=stage_award_get_fl_1,json=stageAwardGetFl1,proto3" json:"stage_award_get_fl_1,omitempty"`
	// {"comment": "Hard 通關獎勵的領取旗號(位元旗號)", "type": "VARCHAR", "size": 200, "default": "null", "can_null": "true"}
	StageAwardGetFl_2 string `protobuf:"bytes,17,opt,name=stage_award_get_fl_2,json=stageAwardGetFl2,proto3" json:"stage_award_get_fl_2,omitempty"`
	// {"comment": "每日簽到任務計數器(前 15 天)", "type": "TINYINT", "size": 4, "default": "-1", "can_null": "false"}
	LastGetLoginAward_15 int32 `protobuf:"varint,18,opt,name=last_get_login_award_15,json=lastGetLoginAward15,proto3" json:"last_get_login_award_15,omitempty"`
	// {"comment": "每日簽到任務計數器(一輪 7 天)", "type": "TINYINT", "size": 4, "default": "-1", "can_null": "false"}
	LastGetLoginAward_7 int32 `protobuf:"varint,19,opt,name=last_get_login_award_7,json=lastGetLoginAward7,proto3" json:"last_get_login_award_7,omitempty"`
	// {"comment": "最後一次領取每日登入獎勵的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastGetLoginAwardTime *TimeStamp `protobuf:"bytes,20,opt,name=last_get_login_award_time,json=lastGetLoginAwardTime,proto3" json:"last_get_login_award_time,omitempty"`
	// {"comment": "最後一次領取的每日任務獎勵編號", "type": "TINYINT", "size": 4, "default": "0", "can_null": "false"}
	LastGetEveryDayAward int32 `protobuf:"varint,21,opt,name=last_get_every_day_award,json=lastGetEveryDayAward,proto3" json:"last_get_every_day_award,omitempty"`
	// {"comment": "最後一次領取每日任務獎勵的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastGetEveryDayAwardTime *TimeStamp `protobuf:"bytes,22,opt,name=last_get_every_day_award_time,json=lastGetEveryDayAwardTime,proto3" json:"last_get_every_day_award_time,omitempty"`
	// {"comment": "成就獎勵的領取旗號(位元旗號)", "type": "TEXT", "default": "null", "can_null": "true"}
	AchievementFl string `protobuf:"bytes,23,opt,name=achievement_fl,json=achievementFl,proto3" json:"achievement_fl,omitempty"`
	// {"comment": "儲存計數器", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	SaveCount int32 `protobuf:"varint,24,opt,name=save_count,json=saveCount,proto3" json:"save_count,omitempty"`
	// {"comment": "帳號建立時間", "type": "TIMESTAMP", "default": "current_timestamp()", "can_null": "false"}
	CreateTime *TimeStamp `protobuf:"bytes,25,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// {"comment": "最後一次登入的時間", "type": "TIMESTAMP", "default": "current_timestamp()", "can_null": "false"}
	LastLoginTime *TimeStamp `protobuf:"bytes,26,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	// {"comment": "最後一次登入的時間", "type": "TIMESTAMP", "can_null": "false"}
	// {"default": "current_timestamp()", "update": "current_timestamp()"}
	LastUpdateTime *TimeStamp `protobuf:"bytes,27,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// {"comment": "最後一次免費開黃金寶箱的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastFreeKey_0Time *TimeStamp `protobuf:"bytes,28,opt,name=last_free_key_0_time,json=lastFreeKey0Time,proto3" json:"last_free_key_0_time,omitempty"`
	// {"comment": "最後一次免費開黑曜石寶箱的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastFreeKey_1Time *TimeStamp `protobuf:"bytes,29,opt,name=last_free_key_1_time,json=lastFreeKey1Time,proto3" json:"last_free_key_1_time,omitempty"`
	// {"comment": "最後一次領取巡邏的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastPatrolTime *TimeStamp `protobuf:"bytes,30,opt,name=last_patrol_time,json=lastPatrolTime,proto3" json:"last_patrol_time,omitempty"`
	// {"comment": "最後一次領取快速收益的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastPatrolFastTime *TimeStamp `protobuf:"bytes,31,opt,name=last_patrol_fast_time,json=lastPatrolFastTime,proto3" json:"last_patrol_fast_time,omitempty"`
	// {"comment": "當日 AD 輪盤的轉動次數", "type": "TINYINT", "size": 4, "default": "0", "can_null": "false"}
	AdRouletteCount int32 `protobuf:"varint,32,opt,name=ad_roulette_count,json=adRouletteCount,proto3" json:"ad_roulette_count,omitempty"`
	// {"comment": "最後一次轉動 AD 輪盤的時間", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	LastAdRouletteTime *TimeStamp `protobuf:"bytes,33,opt,name=last_ad_roulette_time,json=lastAdRouletteTime,proto3" json:"last_ad_roulette_time,omitempty"`
	// {"comment": "最後一封收到的系統郵件 ID", "type": "BIGINT", "size": 20, "default": "0", "can_null": "false"}
	LastMailSystemId int64 `protobuf:"varint,34,opt,name=last_mail_system_id,json=lastMailSystemId,proto3" json:"last_mail_system_id,omitempty"`
	// {"comment": "當日已購買幾次行動值", "type": "TINYINT", "size": 3, "default": "0", "can_null": "false"}
	BuyActCount int32 `protobuf:"varint,35,opt,name=buy_act_count,json=buyActCount,proto3" json:"buy_act_count,omitempty"`
	// {"comment": "用來判斷是否經過了一天", "type": "TIMESTAMP", "default": "'1970-01-01 00:00:01'", "can_null": "false"}
	DayTime *TimeStamp `protobuf:"bytes,36,opt,name=day_time,json=dayTime,proto3" json:"day_time,omitempty"`
	// {"comment": "登入次數", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	LoginCount int32 `protobuf:"varint,37,opt,name=login_count,json=loginCount,proto3" json:"login_count,omitempty"`
	// {"comment": "Client 端設備 ID", "type": "VARCHAR", "size": 128, "default": "'0'", "can_null": "true"}
	DeviceId string `protobuf:"bytes,38,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// {"comment": "機器碼", "type": "VARCHAR", "size": 128, "default": "'0'", "can_null": "true"}
	MachineCode string `protobuf:"bytes,39,opt,name=machine_code,json=machineCode,proto3" json:"machine_code,omitempty"`
	// {"comment": "IP", "type": "VARCHAR", "size": 15, "default": "''", "can_null": "true"}
	Ip string `protobuf:"bytes,40,opt,name=ip,proto3" json:"ip,omitempty"`
	// {"comment": "手機型號", "type": "VARCHAR", "size": 128, "default": "''", "can_null": "true"}
	PhoneName string `protobuf:"bytes,41,opt,name=phone_name,json=phoneName,proto3" json:"phone_name,omitempty"`
	// {"comment": "電信業者", "type": "VARCHAR", "size": 32, "default": "''", "can_null": "true"}
	Telecom string `protobuf:"bytes,42,opt,name=telecom,proto3" json:"telecom,omitempty"`
	// {"comment": "國碼", "type": "VARCHAR", "size": 4, "default": "''", "can_null": "true"}
	Country string `protobuf:"bytes,43,opt,name=country,proto3" json:"country,omitempty"`
	// {"comment": "省分", "type": "VARCHAR", "size": 32, "default": "''", "can_null": "true"}
	Province string `protobuf:"bytes,44,opt,name=province,proto3" json:"province,omitempty"`
	// {"comment": "城市", "type": "VARCHAR", "size": 32, "default": "''", "can_null": "true"}
	City string `protobuf:"bytes,45,opt,name=city,proto3" json:"city,omitempty"`
	// {"comment": "渠道", "type": "VARCHAR", "size": 32, "default": "''", "can_null": "false"}
	ChannelId string `protobuf:"bytes,46,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// {"comment": "網路類型 0=wifi", "type": "SMALLINT", "size": 6, "default": "0", "can_null": "false"}
	NetworkType int32 `protobuf:"varint,47,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	// {"comment": "遊玩秒數", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	PlaySec int32 `protobuf:"varint,48,opt,name=play_sec,json=playSec,proto3" json:"play_sec,omitempty"`
	// {"comment": "位元除錯旗號", "type": "INT", "size": 11, "default": "0", "can_null": "false"}
	DebugFl int32 `protobuf:"varint,49,opt,name=debug_fl,json=debugFl,proto3" json:"debug_fl,omitempty"`
	// {"comment": "進入關卡時寫入的資料", "type": "MEDIUMTEXT", "default": "''", "can_null": "true"}
	EnterStageData string `protobuf:"bytes,50,opt,name=enter_stage_data,json=enterStageData,proto3" json:"enter_stage_data,omitempty"`
	// {"comment": "拿過的裝備有哪些", "type": "MEDIUMTEXT", "default": "''", "can_null": "false"}
	GetEItemLog string `protobuf:"bytes,51,opt,name=get_e_item_log,json=getEItemLog,proto3" json:"get_e_item_log,omitempty"`
	// {"comment": "拿過的英雄有哪些", "type": "MEDIUMTEXT", "default": "''", "can_null": "false"}
	GetHeroLog string `protobuf:"bytes,52,opt,name=get_hero_log,json=getHeroLog,proto3" json:"get_hero_log,omitempty"`
	// {"comment": "拿過的寵物有哪些", "type": "MEDIUMTEXT", "default": "''", "can_null": "false"}
	GetPetLog string `protobuf:"bytes,53,opt,name=get_pet_log,json=getPetLog,proto3" json:"get_pet_log,omitempty"`
	// {"comment": "成就統計資料", "type": "VARCHAR", "size": 256, "default": "''", "can_null": "false"}
	AchievementData string `protobuf:"bytes,54,opt,name=achievement_data,json=achievementData,proto3" json:"achievement_data,omitempty"`
	// {"comment": "其他遊戲設定", "type": "MEDIUMTEXT", "default": "''", "can_null": "false"}
	DOtherData9 string `protobuf:"bytes,55,opt,name=d_other_data9,json=dOtherData9,proto3" json:"d_other_data9,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_user_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_user_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_pb_user_data_proto_rawDescGZIP(), []int{0}
}

func (x *UserData) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserData) GetAccountLv() int32 {
	if x != nil {
		return x.AccountLv
	}
	return 0
}

func (x *UserData) GetAccountExp() int32 {
	if x != nil {
		return x.AccountExp
	}
	return 0
}

func (x *UserData) GetLastActPointAllSec() *TimeStamp {
	if x != nil {
		return x.LastActPointAllSec
	}
	return nil
}

func (x *UserData) GetConvertDataFl() int32 {
	if x != nil {
		return x.ConvertDataFl
	}
	return 0
}

func (x *UserData) GetLotteryExp_0() int32 {
	if x != nil {
		return x.LotteryExp_0
	}
	return 0
}

func (x *UserData) GetAddItemSpace() int32 {
	if x != nil {
		return x.AddItemSpace
	}
	return 0
}

func (x *UserData) GetActPoint() int32 {
	if x != nil {
		return x.ActPoint
	}
	return 0
}

func (x *UserData) GetLv() int32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

func (x *UserData) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *UserData) GetDataVer() string {
	if x != nil {
		return x.DataVer
	}
	return ""
}

func (x *UserData) GetJsonText1() string {
	if x != nil {
		return x.JsonText1
	}
	return ""
}

func (x *UserData) GetSaveData() string {
	if x != nil {
		return x.SaveData
	}
	return ""
}

func (x *UserData) GetStageAwardGetFl_0() string {
	if x != nil {
		return x.StageAwardGetFl_0
	}
	return ""
}

func (x *UserData) GetStageAwardGetFl_1() string {
	if x != nil {
		return x.StageAwardGetFl_1
	}
	return ""
}

func (x *UserData) GetStageAwardGetFl_2() string {
	if x != nil {
		return x.StageAwardGetFl_2
	}
	return ""
}

func (x *UserData) GetLastGetLoginAward_15() int32 {
	if x != nil {
		return x.LastGetLoginAward_15
	}
	return 0
}

func (x *UserData) GetLastGetLoginAward_7() int32 {
	if x != nil {
		return x.LastGetLoginAward_7
	}
	return 0
}

func (x *UserData) GetLastGetLoginAwardTime() *TimeStamp {
	if x != nil {
		return x.LastGetLoginAwardTime
	}
	return nil
}

func (x *UserData) GetLastGetEveryDayAward() int32 {
	if x != nil {
		return x.LastGetEveryDayAward
	}
	return 0
}

func (x *UserData) GetLastGetEveryDayAwardTime() *TimeStamp {
	if x != nil {
		return x.LastGetEveryDayAwardTime
	}
	return nil
}

func (x *UserData) GetAchievementFl() string {
	if x != nil {
		return x.AchievementFl
	}
	return ""
}

func (x *UserData) GetSaveCount() int32 {
	if x != nil {
		return x.SaveCount
	}
	return 0
}

func (x *UserData) GetCreateTime() *TimeStamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserData) GetLastLoginTime() *TimeStamp {
	if x != nil {
		return x.LastLoginTime
	}
	return nil
}

func (x *UserData) GetLastUpdateTime() *TimeStamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *UserData) GetLastFreeKey_0Time() *TimeStamp {
	if x != nil {
		return x.LastFreeKey_0Time
	}
	return nil
}

func (x *UserData) GetLastFreeKey_1Time() *TimeStamp {
	if x != nil {
		return x.LastFreeKey_1Time
	}
	return nil
}

func (x *UserData) GetLastPatrolTime() *TimeStamp {
	if x != nil {
		return x.LastPatrolTime
	}
	return nil
}

func (x *UserData) GetLastPatrolFastTime() *TimeStamp {
	if x != nil {
		return x.LastPatrolFastTime
	}
	return nil
}

func (x *UserData) GetAdRouletteCount() int32 {
	if x != nil {
		return x.AdRouletteCount
	}
	return 0
}

func (x *UserData) GetLastAdRouletteTime() *TimeStamp {
	if x != nil {
		return x.LastAdRouletteTime
	}
	return nil
}

func (x *UserData) GetLastMailSystemId() int64 {
	if x != nil {
		return x.LastMailSystemId
	}
	return 0
}

func (x *UserData) GetBuyActCount() int32 {
	if x != nil {
		return x.BuyActCount
	}
	return 0
}

func (x *UserData) GetDayTime() *TimeStamp {
	if x != nil {
		return x.DayTime
	}
	return nil
}

func (x *UserData) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *UserData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserData) GetMachineCode() string {
	if x != nil {
		return x.MachineCode
	}
	return ""
}

func (x *UserData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserData) GetPhoneName() string {
	if x != nil {
		return x.PhoneName
	}
	return ""
}

func (x *UserData) GetTelecom() string {
	if x != nil {
		return x.Telecom
	}
	return ""
}

func (x *UserData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UserData) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserData) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UserData) GetNetworkType() int32 {
	if x != nil {
		return x.NetworkType
	}
	return 0
}

func (x *UserData) GetPlaySec() int32 {
	if x != nil {
		return x.PlaySec
	}
	return 0
}

func (x *UserData) GetDebugFl() int32 {
	if x != nil {
		return x.DebugFl
	}
	return 0
}

func (x *UserData) GetEnterStageData() string {
	if x != nil {
		return x.EnterStageData
	}
	return ""
}

func (x *UserData) GetGetEItemLog() string {
	if x != nil {
		return x.GetEItemLog
	}
	return ""
}

func (x *UserData) GetGetHeroLog() string {
	if x != nil {
		return x.GetHeroLog
	}
	return ""
}

func (x *UserData) GetGetPetLog() string {
	if x != nil {
		return x.GetPetLog
	}
	return ""
}

func (x *UserData) GetAchievementData() string {
	if x != nil {
		return x.AchievementData
	}
	return ""
}

func (x *UserData) GetDOtherData9() string {
	if x != nil {
		return x.DOtherData9
	}
	return ""
}

var File_pb_user_data_proto protoreflect.FileDescriptor

var file_pb_user_data_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x62, 0x2f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x11, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x12, 0x3e, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x30, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x30,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x6c, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x31, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x6c, 0x5f, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x30, 0x12, 0x2e, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x6c, 0x5f, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x31, 0x12, 0x2e, 0x0a, 0x14,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x6c, 0x5f, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x32, 0x12, 0x34, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x31, 0x35, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x31, 0x35, 0x12, 0x32, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x37, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x37, 0x12, 0x44, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x30, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x65, 0x65, 0x4b, 0x65, 0x79, 0x30, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x31, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x65,
	0x79, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6c, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x65, 0x74, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x67,
	0x65, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x74, 0x50, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x39, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x39, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x3b, 0x70, 0x62, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_user_data_proto_rawDescOnce sync.Once
	file_pb_user_data_proto_rawDescData = file_pb_user_data_proto_rawDesc
)

func file_pb_user_data_proto_rawDescGZIP() []byte {
	file_pb_user_data_proto_rawDescOnce.Do(func() {
		file_pb_user_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_user_data_proto_rawDescData)
	})
	return file_pb_user_data_proto_rawDescData
}

var file_pb_user_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pb_user_data_proto_goTypes = []interface{}{
	(*UserData)(nil),  // 0: user_data
	(*TimeStamp)(nil), // 1: TimeStamp
}
var file_pb_user_data_proto_depIdxs = []int32{
	1,  // 0: user_data.last_act_point_all_sec:type_name -> TimeStamp
	1,  // 1: user_data.last_get_login_award_time:type_name -> TimeStamp
	1,  // 2: user_data.last_get_every_day_award_time:type_name -> TimeStamp
	1,  // 3: user_data.create_time:type_name -> TimeStamp
	1,  // 4: user_data.last_login_time:type_name -> TimeStamp
	1,  // 5: user_data.last_update_time:type_name -> TimeStamp
	1,  // 6: user_data.last_free_key_0_time:type_name -> TimeStamp
	1,  // 7: user_data.last_free_key_1_time:type_name -> TimeStamp
	1,  // 8: user_data.last_patrol_time:type_name -> TimeStamp
	1,  // 9: user_data.last_patrol_fast_time:type_name -> TimeStamp
	1,  // 10: user_data.last_ad_roulette_time:type_name -> TimeStamp
	1,  // 11: user_data.day_time:type_name -> TimeStamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pb_user_data_proto_init() }
func file_pb_user_data_proto_init() {
	if File_pb_user_data_proto != nil {
		return
	}
	file_pb_TimeStamp_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_user_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_user_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_user_data_proto_goTypes,
		DependencyIndexes: file_pb_user_data_proto_depIdxs,
		MessageInfos:      file_pb_user_data_proto_msgTypes,
	}.Build()
	File_pb_user_data_proto = out.File
	file_pb_user_data_proto_rawDesc = nil
	file_pb_user_data_proto_goTypes = nil
	file_pb_user_data_proto_depIdxs = nil
}
